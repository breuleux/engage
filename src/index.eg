
require:
   quasar ->
      cached-function, State, Function
   .fs ->
      FileIterator, FileSystem
   .output ->
      Write, Delete, commit-all
   .util ->
      rename, Renamer
      task-function
   lodash
   path

provide:
   cached-function
   task-function
   FileIterator, FileSystem
   rename, Renamer
   Write, Delete, commit-all
   Engage
   task
   each!


debounce{delay}{f} =
   lodash.debounce{f, delay}


class Engage:
   constructor{@main-task, @options = {=}} =
      @options.debounce or= 25
      @options.log or= console.log
      @options.error or= console.error
      @options.rename or= Renamer{@options}
   run{} =
      @state = State{FileSystem{@options}, commit-policy = null}
      @state.on{.transact, lodash.debounce{f, @options.debounce}} where f{} =
         @state.commit{}
      @reac = Function{@state, @main-task, {clobber-patch = false}}
      @reac.on{.error, e -> @err{e}}
      @reac.sync{-> @act{}}
   async act{} =
      v = await @reac.get{} ;; ???
      commit-all{v, @options}
   async err{e} =
      @options.error{"An error occurred."}
      @options.error{e.stack}


globals: exports
exports and module.exports = Engage


macro{task-function} task-macro{expr} =
   let {"task-function" => tfn} = @deps
   {it, self} = @mark{`@`, `self`}
   @multimacro with {
      project{match expr} =
         `_lambda{^args, ^pre, ^body, ^post, ^gen}` ->
            ```
            [^tfn] with eager-async with
               _lambda{^args, ^pre, [let ^it and ^self = this, ^body], ^post, ^gen}
            ```
         `^args -> ^body` ->
            ```
            [^tfn] with eager-async with
               ^args ->
                  let ^it and ^self = this
                  ^body
            ```
         else ->
            ;; print expr
            throw E.syntax.invalid-task{"invalid", node = expr}
   }

task = task-function
task.macro = task-macro

macro{task-function} [each!]{#data{expr, body}} =
   let {"task-function" => tfn} = @deps
   ```
   eager-async rawf{x} = match x: ^body
   f = [^tfn]{rawf}
   await all [^expr each x -> f{x}]
   ```

