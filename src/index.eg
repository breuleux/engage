
require:
   quasar ->
      cached-function, State, Function
   "./fs" ->
      FileIterator, FileSystem
   .util ->
      rename, Renamer
      task-function
      Logger, EngageMessage
   lodash
   path
   chalk
   fs
   filendir

provide:
   cached-function
   task-function
   FileIterator, FileSystem
   Logger, EngageMessage, log, minilog
   rename, Renamer
   Engage
   task
   each!


debounce{delay}{f} =
   lodash.debounce{f, delay}


log = Logger{}
minilog = Logger{false}


TOP = "{{TOP}}"
meta-task{main-task} =
   method f{} =
      this.log??{EngageMessage{.engage-on, main-task}}
      result =
         if @paths.content:
            main-task{@get{@paths.content}}
         else:
            main-task{null}
      this.log??{EngageMessage{.engage-off, main-task}}
      result
   f.engage-name = TOP
   cached-function{f}


default-options = {
   error = console.error
   debounce = 25
   display-full-paths = false
   ignore-empty-changes = false
   log = log
   watch = true
}

default-paths = {
   root = "."
}

default-show = {
   task = true
   cache = false
   read = true
   write = true
   delete = true
}

class Engage:

   constructor{main-task, @options = {=}} =
      @main-task = meta-task{main-task}
      @options = default-options & @options
      @options.paths = default-paths & [@options.paths or {=}]
      @options.show = default-show & [@options.show or {=}]
      @options.log or= {*} -> pass
      paths = @options.paths
      if not @options.rename-out:
         if paths.content and paths.output:
            @options.rename-out = Renamer with {
               from = path.join{paths.root, paths.content}
               to = path.join{paths.root, paths.output}
            }
         else:
            @options.rename-out{*} =
               throw E.no-renamer with
                  "There is no renameOut."
                  \ + " Engage will make one for you if you set"
                  \ + " both paths.content and paths.output in the options."
                  \ + " Note that you can make custom renamers with"
                  \ + " engage.Renamer({from: fromPath, to: toPath}),"
                  \ + " and you can add them to the options."
      @last-effects = new Set{}
      @file-contents = {=}

   tweak-path{p} =
      if @options.display-full-paths:
         p
      else:
         path.relative{process.cwd{}, p}

   run{} =
      @state = State{FileSystem{@options.paths.root, @options}, commit-policy = null}
      @state.on{.transact, lodash.debounce{f, @options.debounce}} where f{} =
         @state.commit{}
      @reac = Function{@state, @main-task} with {
         listeners = {
            effect{match eff} =
               #write{path, contents} ->
                  match @file-contents[path]:
                     undefined? ->
                        if @options.show.write:
                           @options.log??{EngageMessage{.add-file, @tweak-path{path}}}
                     === contents ->
                        return
                     else ->
                        if @options.show.write:
                           @options.log??{EngageMessage{.change-file, @tweak-path{path}}}
                  filendir.write-file-sync{path, contents}
                  @file-contents[path] = contents
            start-compute{f, s, args} =
               if f.engage-name !== TOP and @options.show.task:
                  @options.log??{EngageMessage{.begin-task, f.engage-name, args}}
            end-compute{f, s, args, time} =
               if f.engage-name !== TOP and @options.show.task:
                  @options.log??{EngageMessage{.end-task, f.engage-name, args, time}}
            begin-cache{f, s, args} =
               if f.engage-name !== TOP and @options.show.task and @options.show.cache:
                  @options.log??{EngageMessage{.begin-cache, f.engage-name, args}}
            end-cache{f, s, args} =
               if f.engage-name !== TOP and @options.show.task and @options.show.cache:
                  @options.log??{EngageMessage{.end-cache, f.engage-name, args}}
            read-file{path} =
               if @options.show.read:
                  @options.log??{EngageMessage{.read-file, @tweak-path{path}}}
         }
         clobber-patch = false
      }
      @reac.on{.error, e -> @err{e}}
      @reac.sync{-> @act{}}
      @reac.sync-effects{e -> @effects{e}}

   async act{} =
      v = await @reac.get{} ;; ???

   async effects{_new-effects} =
      new-effects = new Set with _new-effects each
         #write{path, contents} -> path
         else -> continue
      if @options.clean:
         @last-effects each effect ->
            if not new-effects.has{effect}:
               fs.unlink-sync{effect}
               if @options.show.delete:
                  @options.log??{EngageMessage{.remove-file, @tweak-path{effect}}}
      @last-effects = new-effects

   async err{e} =
      @options.error{"An error occurred."}
      @options.error{e.stack}


globals: exports
exports and module.exports = Engage


macro{task-function} task-macro{expr} =
   let {"task-function" => tfn} = @deps
   {it, self} = @mark{`@`, `self`}
   expr as [#send{#symbol{name}, _} or name is ""]
   @multimacro with {
      project{match expr} =
         `_lambda{^args, ^pre, ^body, ^post, ^gen}` ->
            ```
            [^tfn]{^=name} with eager-async with
               _lambda{^args, ^pre, [let ^it and ^self = this, ^body], ^post, ^gen}
            ```
         `^args -> ^body` ->
            ```
            [^tfn]{^=name} with eager-async with
               ^args ->
                  let ^it and ^self = this
                  ^body
            ```
         else ->
            ;; print expr
            throw E.syntax.invalid-task{"invalid", node = expr}
   }

task = task-function
task.macro = task-macro

macro{task-function} [each!]{#data{expr, body}} =
   let {"task-function" => tfn} = @deps
   ```
   eager-async rawf{x} = match x: ^body
   f = [^tfn]{rawf}
   ^expr each x -> await f{x}
   ```

