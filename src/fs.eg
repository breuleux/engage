
require:
   quasar ->
      ID, DIRECTORY, symbols
      setup-proxy, deprox, proxy
      current-context
      register
   .output ->
      read-from, Write
   .util ->
      task-function
   path
   fs
   chokidar
   minimatch

provide:
   FileIterator
   FileSystem
   FSNode



extract-text-transformer{f} =
   method new-f{file, options} =
      state = current-context{}??.state
      if not state:
         throw E.map-file{"Cannot find a renaming function to use."}
      res = f.call{@, file.text, file}
      match res:
         Write? w -> w
         String? s ->
            Write{state.self{}.rename{file.path, options}, s}
         other ->
            other
   new-f

class FileIterator:
   constructor{@gen} =
      @results = null
   gen [^Symbol.iterator]{} =
      if @results:
         @results each x -> yield x
      else:
         results = {}
         @gen each x ->
            results.push{x}
            yield x
         @results = results
   map{fn} =
      t = task-function{fn}
      [@] each x -> t{x}
   ;; map-file{options = {=}, fn} =
   ;;    t = task-function{fn, extract-text-transformer}
   ;;    [@] each file -> t{file, {=} & options}
   bundle{fn} =
      throw E.todo{}

analyze-path{p >> p.split{"/"}} =
   var i = 0
   p[... -1] each part ->
      if R"\*"? part:
         break
      i += 1
   {base = p.slice{0, i}.join{"/"} or "/"
    rest = p.slice{i}}


;;;;;;;;;;;;;;;;
;; FileSystem ;;
;;;;;;;;;;;;;;;;

class FileSystem:

   constructor{@options} =
      [@] &: @options
      @directory-cache = {=}

   get{p} =
      match @directory-cache[p]:
         undefined? ->
            entry = FSNode{p}
            expr-value @directory-cache[p] =
               match @[DIRECTORY]:
                  undefined? ->
                     entry
                  dir ->
                     dir.acquire{entry}
         existing ->
            existing

   find{glob} =
      {=> base, => rest} = analyze-path{glob}
      @get{base}.find{rest.join{"/"}}


class FileSystemProxy < FileSystem:

   constructor{obj, tracks, patch} =
      [@] &: obj.options
      setup-proxy{@, obj, tracks, patch}

   get{key} =
      @[symbols.register-tracks]{key}
      proxy{@[symbols.obj].get{key}
            @[symbols.tracks]
            @[symbols.patch]}




;;;;;;;;;;;;
;; FSNode ;;
;;;;;;;;;;;;

class FSNode:

   constructor{@path, @last-time = Date{}} =
      @_files = null
      try:
         stat = fs.lstat-sync{@path}
         @type =
            if stat.is-directory{}:
               .directory
            elif stat.is-file{}:
               .file
            else:
               .unsupported
      catch e:
         @type = null

   ;;;;;;;;;;;;
   ;; COMMON ;;
   ;;;;;;;;;;;;

   stat{} =
      @last-time
      fs.lstat-sync{@path}

   ;; touch{} =
   ;;    @last-time = Date{}

   ;;;;;;;;;;;;;;;;;;;;
   ;; FILE INTERFACE ;;
   ;;;;;;;;;;;;;;;;;;;;

   read{} =
      if @type === .file:
         @last-time
         read-from[@path] = true
         fs.read-file-sync{@path}
      else:
         throw E.engage.read{'read: {@path} is not a file'}

   ;;;;;;;;;;;;;;;;;;;
   ;; DIR INTERFACE ;;
   ;;;;;;;;;;;;;;;;;;;

   get-files{} =
      if @_files === null:
         @_files = Object.create{null}
         match @[DIRECTORY]:
            undefined? ->
               fs.readdir-sync{@path} each filename ->
                  full-path = path.join{@path, filename}
                  @_files[filename] = FSNode{full-path}
            dir ->
               fs.readdir-sync{@path} each filename ->
                  full-path = path.join{@path, filename}
                  @_files[filename] = dir.acquire{FSNode{full-path}}
         @_files
      else:
         @_files

   find{glob} =
      gen g{} =
         match glob.split{"/"}:
            {""} ->
               yield [@]
            {"**", *rest} ->
               yield all @find{rest.join{"/"}}
               [@] each entry when entry.type === .directory ->
                  yield all entry.find{glob}
            {minimatch.make-re! x, *rest} ->
               @keys{} each
                  x? name ->
                     entry = @get{name}
                     if rest == {}:
                        yield entry
                     elif entry.type === "directory":
                        yield all entry.find{rest.join{"/"}}
                  else ->
                     continue
      FileIterator{g{}}

   get{key} =
      @get-files{}
      match key.split{"/"}:
         {file} ->
            @_files[file]
         {base, *rest} ->
            @get{base}.get{rest.join{"/"}}

   set{String? key or Number? key, value} =
      @get-files{}
      @_files[key] = value

   .delete{key} =
      @get-files{}
      delete @_files[key]

   .keys{} =
      keys{@get-files{}}

   entries{} =      
      items{@get-files{}}

   gen [^Symbol.iterator]{} =
      items{@get-files{}} each {_, f} -> yield f
      ;; keys{@data} each k -> yield @get{k}



;; FILE PROPERTIES

Object.define-property{FSNode.prototype, .contents} with {
   method get{} = @read{}
}

Object.define-property{FSNode.prototype, .text} with {
   method get{} = @read{}.to-string{}
}



class FSNodeProxy < FSNode:

   constructor{@path, obj, tracks, patch} =
      setup-proxy{@, obj, tracks, patch, FSNodeTrack}

   _prox{x} =
      proxy{x, @[symbols.tracks], @[symbols.patch]}

   __touch{} =
      @[symbols.register-patch]{"//last-time"} with
         #update{Date{}}

   __touch-directory{} =
      @[symbols.register-patch]{"//directories"} with
         #update{true}

   find{glob} =
      gen g{} =
         match glob.split{"/"}:
            {""} ->
               yield [@]
            {"**", *rest} ->
               yield all @find{rest.join{"/"}}
               @[symbols.register-tracks]{"//directories"}
               [@[symbols.obj]] each entry when entry.type === .directory ->
                  yield all @_prox{entry}.find{glob}
            {orig and minimatch.make-re! x, *rest} ->
               @[symbols.register-tracks]{'//:{orig}'}
               @[symbols.obj].entries{} each
                  {x? name, entry} ->
                     if rest == {}:
                        yield entry
                     elif entry.type === "directory":
                        yield all entry.find{rest.join{"/"}}
                  else ->
                     continue
      FileIterator{g{}}

   get{key} =
      @[symbols.register-tracks]{key}
      @_prox{@[symbols.obj].get{key}}

   set{key, value} =
      @[symbols.register-patch]{key, #update{deprox{value}} &: {type = value}}

   .delete{key} =
      data = @[symbols.obj]._files[key]
      type = data??.type
      @[symbols.register-patch]{key, #delete{} &: {type = type}}

   gen [^Symbol.iterator]{} =
      @entries{} each {_, v} -> yield v

   keys{} =
      @[symbols.register-tracks]{"//iter"}
      @[symbols.obj].keys{}

   entries{} =
      @[symbols.register-tracks]{"//iter"}
      @[symbols.obj].entries{} each {k, v} ->
         {k, proxy{v, @[symbols.tracks], @[symbols.patch]}}

Object.define-property{FSNodeProxy.prototype, .type} with {
   method get{} =
      @[symbols.register-tracks]{"//type"}
      @[symbols.obj].type
   method set{type} =
      @[symbols.register-patch]{"//type"} with
         #update{type}
}

Object.define-property{FSNodeProxy.prototype, .last-time} with {
   method get{} =
      @[symbols.register-tracks]{"//last-time"}
      @[symbols.obj].last-time
}



class FSNodeTrack:
   gen [^symbols.relevant-changes]{writes} =
      items{@} each {match name, entry} ->
         R"^//:(.*)"! {_, minimatch.make-re! x} ->
            items{writes or {=}} each {wname, _} when x? wname ->
               yield entry
         else ->
            pass
      items{writes or {=}} each match {name, cmd} ->
         when @[name] ->
            yield @[name]
         when cmd.type === .directory and @["//directories"] ->
            yield @["//directories"]
         when @["//iter"] ->
            yield @["//iter"]




register{FileSystem.prototype} with {

   package = require: ..package

   serialize{value} =
      {options = value.options
       directory-cache = value.directory-cache}
   create{} =
      Object.create{FileSystem.prototype}
   fill{fs, fields} =
      fs.options = fields.options
      fs.directory-cache = fields.directory-cache

   proxy{deprox! value, tracks, patch} =
      FileSystemProxy{value, tracks, patch}
}


register{FSNode.prototype} with {

   package = require: ..package

   serialize{value} =
      {"//type" => value.type
       "//path" => value.path
       "//last-time" => value.last-time
       "//has-files" => Boolean{value._files}} &:
         object with items{value._files or {=}}
   create{} =
      Object.create{FSNode.prototype}
   fill{fsn, fields} =
      fsn._files = {=}
      items{fields} each {match k, v} ->
         "//type" -> fsn.type = v
         "//path" -> fsn.path = v
         "//last-time" -> fsn.last-time = v
         "//has-files" -> fsn._files = if{v, {=}, null}
         "//iter" -> pass
         else -> fsn._files[k] = v

   proxy{deprox! value, tracks, patch} =
      FSNodeProxy{value.path, value, tracks, patch}

   enter{@, dir} =
      s = dir[symbols.associated-state]
      prox = s.model{@}
      @_watcher = chokidar.watch{@path, depth = 0, ignore-initial = true}.on{.all} with
         {match event, fp and p >> path.relative{@path, p}} ->
            ;; do:
            ;;    print {event, fp, p}
            match when p === "" ->
               .add ->
                  @_watcher.add{@path}
                  prox.type = .file
               .add-dir ->
                  @_watcher.add{@path}
                  prox.type = .directory
               .unlink or .unlink-dir ->
                  @_watcher.unwatch{@path}
                  prox.type = null
               .change ->
                  s.transact with -> prox.__touch{}
               else ->
                  print 'Untracked event: {event}'
            .add ->
               s.transact with -> prox.set{p, dir.acquire{FSNode{fp}}}
            .add-dir ->
               s.transact with -> prox.set{p, dir.acquire{FSNode{fp}}}
               prox.__touch-directory{}
            .unlink or .unlink-dir ->
               s.transact with -> prox.delete{p}
            .change ->
               pass
            else ->
               print 'Untracked event: {event}'

   exit{@, dir} =
      if @_watcher:
         @_watcher.unwatch{@path}
}
