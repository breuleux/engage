
require:
   spacecore2 ->
      ID, methods, fields
      setup-proxy, deprox, proxy
   .output ->
      read-from
   path
   fs
   chokidar

provide:
   File


class File:
   type = .file
   constructor{@path} =
      pass
   stat{} =
      fs.lstat-sync{@path}
   read{} =
      read-from[@path] = true
      fs.read-file-sync{@path}

   [^methods.proxy]{tracks, patch, prevent-dirty-reads} =
      FileProxy{@path, @, tracks, patch, prevent-dirty-reads}

   [^methods.iterate-properties]{} = {}

   [^methods.fork]{dir} =
      File{@path}

   [^methods.patch]{patch, dir} =
      pass

   [^methods.clobber]{new-dict, dir} =
      throw E.no-clobber{"Cannot clobber a File object."}

   gen [^methods.relevant-changes]{reads, writes} =
      if writes["@read"] and reads["@read"]:
         yield reads["@read"]

   [^methods.enter]{dir} =
      s = dir[fields.associated-state]
      prox = s.model{@}
      @_watcher = chokidar.watch{@path, depth = 0, ignore-initial = true}.on{.all} with
         {match event, p >> path.relative{@path, p}} ->
            .add ->
               pass
            .change ->
               s.transact with -> prox.touch{}
            .unlink ->
               @_watcher.unwatch{@path}
            else ->
               print 'Untracked event: file::{event}'

   [^methods.exit]{dir} =
      if @_watcher:
         @_watcher.unwatch{@path}

Object.define-property{File.prototype, .contents} with {
   method get{} = @read{}
}

Object.define-property{File.prototype, .text} with {
   method get{} = @read{}.to-string{}
}


class FileProxy < File:
   type = .file

   constructor{@path, obj, tracks, patch, prevent-dirty-reads = true} =
      setup-proxy{@, obj, tracks, patch, prevent-dirty-reads}

   read{} =
      @[methods.check-dirty-read]{"@read"}
      @[methods.register-tracks]{"@read", -> true}
      @[fields.obj].read{}

   stat{} =
      @[methods.check-dirty-read]{"@read"}
      @[methods.register-tracks]{"@read", -> true}
      proxy{@[fields.obj].stat{}
            @[fields.tracks]
            @[fields.patch]
            @[fields.prevent-dirty-reads]}

   touch{} =
      @[methods.register-patch]{"@read", -> true}

