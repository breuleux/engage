
require:
   quasar ->
      ID, symbols
      setup-proxy, deprox, proxy
      register
   .output ->
      read-from
   path
   fs
   chokidar

provide:
   File


class File:
   type = .file
   constructor{@path, @last-time = Date{}} =
      pass
   stat{} =
      @last-time
      fs.lstat-sync{@path}
   read{} =
      @last-time
      read-from[@path] = true
      fs.read-file-sync{@path}
   touch{} =
      @last-time = Date{}


Object.define-property{File.prototype, .contents} with {
   method get{} = @read{}
}

Object.define-property{File.prototype, .text} with {
   method get{} = @read{}.to-string{}
}



register{File.prototype} with {
   package = require: ..package
   serialize{value} =
      {path = value.path
       last-time = value.last-time}
   create{} =
      Object.create{File.prototype}
   fill{x, fields} =
      x.path = fields.path
      x.last-time = fields.last-time

   enter{@, dir} =
      s = dir[symbols.associated-state]
      prox = s.model{@}
      @_watcher = chokidar.watch{@path, depth = 0, ignore-initial = true}.on{.all} with
         {match event, p >> path.relative{@path, p}} ->
            .add ->
               pass
            .change ->
               s.transact with -> prox.touch{}
            .unlink ->
               @_watcher.unwatch{@path}
            else ->
               print 'Untracked event: file::{event}'
   exit{@, dir} =
      if @_watcher:
         @_watcher.unwatch{@path}
}


