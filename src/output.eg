
require:
   fs
   mkdirp
   path

provide:
   Write
   Delete
   commit-all
   read-from
   validate-output-path


read-from = {=}

validate-output-path{p, o = {=}} =
   if not o.allow-overwrite and read-from[p]:
      throw E.overwrite with
         'Will not overwrite file {p} because it was read by the main task.'
         \ + ' This stoppage can be overruled with option allow-overwrite = true.'
   if o.output-white-list:
      var okay = false
      [Array! o.output-white-list] each rpath ->
         if not path.relative{rpath, p}.starts-with{".."}:
            okay = true
      if not okay:
         throw E.not-white-listed{'Path {p} is not white-listed for writing.'}
   [Array! [o.read-only or {}]] each rpath ->
      if not path.relative{rpath, p}.starts-with{".."}:
         throw E.read-only{'Path {rpath} is read-only, so {p} cannot be written.'}
   true

class Write:
   constructor{@path, @contents, @options = {=}} =
      @written = null
   write{options = {=}} =
      o = @options & options
      validate-output-path{@path, o}
      if o.log:
         o.log{.write, @path}
      base = @path.split{"/"}[... -1].join{"/"}
      if base !== "":
         mkdirp.sync{base}
      fs.write-file-sync{@path, @contents, o}
      @written = new Date{}
   commit{options = {=}} =
      if not @written:
         @write{options}

class Delete:
   constructor{@path, @contents, @options = {=}} =
      @done = false
   .delete{options = {=}} =
      o = @options & options
      if o.log:
         o.log{.delete, @path}
      fs.unlink-sync{@path}
      @done = true
   commit{options = {=}} =
      if not @done:
         @delete{options}


commit-all{match, options = {=}} =
   Array? instructions ->
      instructions each x ->
         commit-all{x, options}
   instruction and {=> commit} ->
      instruction.commit{options}
   else ->
      pass


