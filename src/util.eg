
require:
   path
   quasar ->
      cached-function
   chalk

provide:
   rename, Renamer
   task-function
   EngageMessage
   Logger


;;;;;;;;;;;;;
;; RENAMER ;;
;;;;;;;;;;;;;

rename{arg and [var {path => p} or p], opts = {=}} =
   rebase = opts.rebase or [opts.from and {opts.from => opts.to or ""}] or {=}
   items{rebase} each {from, to} ->
      rel = path.relative{from, p}
      if not rel.starts-with{"../"}:
         p = path.join{to, rel}
         break
   if opts.extension:
      p = p.replace{R"(\.[a-zA-Z0-9]+)?$", opts.extension}
   if opts.dir:
      p = path.dirname{p}
   if opts.base:
      p = path.basename{p}
   match arg:
      String? -> p
      else -> arg.root{}.get{p}

class _Renamer:
   constructor{@options = {=}} =
      pass
   .rename{p, options = {=}} =
      rename{p, @options & options}

Renamer{options} =
   r = _Renamer{options}
   r.rename.bind{r}



;;;;;;;;;;;;;
;; LOGGING ;;
;;;;;;;;;;;;;

class EngageMessage:
   constructor{@type, *[@arguments]} =
      pass
   to-string-terse{} =
      match @type:
         .end-task or .end-cache ->
            {task-name, _, time = ""} = @arguments
            '{chalk.cyan{"end"}} {chalk.grey{if{Number? time, String{time} + "ms", ""}}}'
   to-string{} =
      match @type:
         .begin or .end or .message ->
            @arguments[0]
         .engage-on ->
            ""
         .engage-off ->
            "----------"
         .begin-task or .end-task or .begin-cache or .end-cache ->
            {task-name, _, time = ""} = @arguments
            xs = {
               chalk.cyan{@type.replace{"C", " c"}.replace{"Task", ""}}
               chalk.yellow{task-name}
               chalk.grey{if{Number? time, String{time} + "ms", ""}}
            }
            [xs each x when x -> x].join{" "}
         .effect ->
            {name} = @arguments
            chalk.green{'Writing {name}'}
         .error ->
            {error} = @arguments
            chalk.red{'ERROR: {error.message}'}
         do:
            file = match @arguments:
               {x} -> x
               else -> "???"
         .read-file ->
            'R {file}'
         .add-file ->
            chalk.green{'+ {file}'}
         .remove-file ->
            chalk.red{'- {file}'}
         .change-file ->
            chalk.green{'M {file}'}
         else ->
            '{@type}({@arguments.join{", "}})'
   inspect{} =
      @to-string{}


class BasicLogger:

   constructor{@indent} =
      @newline = true
      @parent = null

   write{x} =
      if @newline:
         process.stdout.write{[0 .. @indent each i -> ""].join{" "}}
      process.stdout.write{x}
      @newline = x.ends-with{"\n"}

   write-line{x} =
      @write{x + "\n"}



class GroupLogger:

   constructor{@opening, @parent} =
      @indent = [@parent??.indent or 0] + 2
      @logger = BasicLogger{@indent}
      @opened = not @opening
      @newline = false

   write{x} =
      if not @opened:
         @opened = true
         if String{@opening}:
            @parent.write-line{@opening}
      @logger.write{x}

   write-line{x} =
      @write{x + "\n"}

   end{m} =
      if not String{m}: return @parent
      if not @opened:
         @opened = true
         if m.to-string-terse:
            @parent.write-line{@opening + " " + m.to-string-terse{}}
         else:
            @parent.write-line{@opening}
            @parent.write-line{m}
      else:
         @parent.write-line{m}
      @parent


class _Logger:

   constructor{} =
      @init-group{}

   init-group{} =
      @group = BasicLogger{0}

   start-group{opening} =
      @group = GroupLogger{opening, @group}

   end-group{closing} =
      if @group.parent:
         @group = @group.end{closing}

   log{*messages} =
      pr{i, match message} =

         do:
            wr{x} =
               @group.write{x}
            wrl{x} =
               if i === [messages.length - 1]:
                  @group.write-line{x}
               else:
                  @group.write{x + " "}

         EngageMessage? {type => match} ->
            R"^begin"? ->
               @start-group{message}
            R"^end"? ->
               @end-group{message}
            .engage-off ->
               @init-group{}
               wrl{message}
            else ->
               if String{message} !== "":
                  wrl{message}
         else ->
            wrl{message}

      enumerate{messages} each {i, m} -> pr{i, m}


Logger{*args} =
   l = _Logger{*args}
   l.log.bind{l} &: {without-newline{x} = l.write{x}}


;;;;;;;;;;;;;;;;
;; TASK CACHE ;;
;;;;;;;;;;;;;;;;

task-function{*match} =
   {String? name, fn} ->
      fn.engage-name = name
      cached-function{fn, name}
   {fn} ->
      fn.engage-name = null
      cached-function{fn, ""}

;; task-cache = {=}

;; task-function{*match} =
;;    {String? name, fn} ->
;;       _task-function{fn, null, name}
;;    {fn} ->
;;       _task-function{fn, null, ""}

;; _task-function{f, transform = null, name = ""} =
;;    f2 = f
;;    f.engage-name = name
;;    m = [task-cache[f.to-string{}] or= new Map{}]
;;    match m.get{transform}:
;;       undefined? and match is transform ->
;;          null? ->
;;             c = cached-function{f2}
;;             m.set{transform, c}
;;             c
;;          else ->
;;             c = cached-function{transform{f2}}
;;             m.set{transform, c}
;;             c
;;       task-f ->
;;          task-f

